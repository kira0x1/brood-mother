@using System
@using Sandbox;
@using Kira
@using Sandbox.UI
@inherits PanelComponent

<root>

    <div class="vitals">
        @* <div class="vitals-fill" style="width:@(HealthFill * 100)%"></div> *@
        <div class="vitals-text">@HealthText</div>
    </div>

    <div class="stats-hud">
        <div class="score">
            <score-text>Score:</score-text>
            <score-value>@ScoreValue</score-value>
        </div>

        <div class="gold">
            <gold-text>Gold:</gold-text>
            <gold-value>@GoldValue</gold-value>
        </div>

        <div class="mobs">
            <div class="mob-li">
                <mobs-text>Mobs Alive: </mobs-text>
                <mobs-value>@MobValue</mobs-value>
            </div>
            <div class="mob-li">
                <mobs-text>Mobs Killed: </mobs-text>
                <mobs-value>@TotalKilled</mobs-value>
            </div>
        </div>
    </div>

    <div class="hotbar">
        @foreach (var slot in Slots)
        {
            var c = slot.id == CurrentSlotId ? "slot-active" : "slot";
            var icon = slot.hasItem ? slot.icon : "";

            <div class=@c>
                @if (slot.hasItem)
                {
                    <img class="slot-icon" src="@icon" alt=""/>
                }
            </div>
        }
    </div>
</root>


@code
{
    [Property] public PlayerManager Player { get; set; }

    private Slot[] Slots => Player.Inventory.Slots;
    private int CurrentSlotId => Player.Inventory.CurrentSlot;
    private MobSpawner Spawner { get; set; }

    protected override void OnStart()
    {
        base.OnStart();
        Spawner = Scene.Components.GetInDescendants<MobSpawner>(true);
    }

    public string HealthText
    {
        get
        {
            if (Player.IsValid())
                return $"{Player.Health:F0} / {Player.MaxHealth:F0}";
            return "null / null";
        }
    }

    public float HealthFill
    {
        get
        {
            if (Player.IsValid())
            {
                return Player.Health / Player.MaxHealth;
            }

            return 0f;
        }
    }

    public string ScoreValue
    {
        get
        {
            if (!Player.IsValid()) return "Error";
            return Player.Score.ToString();
        }
    }

    public string GoldValue
    {
        get
        {
            if (!Player.IsValid()) return "Error";
            return Player.Gold.ToString();
        }
    }


    public string MobValue
    {
        get
        {
            if (Spawner.IsValid()) return Spawner.CurMobsAlive.ToString();
            return "Error";
        }
    }

    public string TotalKilled
    {
        get
        {
            if (!Player.IsValid()) return "Error";
            return Player.TotalKills.ToString();
        }
    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => HashCode.Combine(HealthText, CurrentSlotId, Player.Inventory.GetHashCode, Player.Score, Player.Gold, Spawner?.CurMobsAlive);
}